# Copyright (c) 2020-2023 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import("//build/ohos.gni")
import("//third_party/curl/curl.gni")

install_script = rebase_path("//third_party/curl/install.py")
curl_log_path = rebase_path("$target_gen_dir")
install_args = [
  "--gen-dir",
  "$curl_log_path",
]
print("Install OpenEuler Curl")
print(install_script)
print(install_args)
print(exec_script(install_script, install_args, "string", []))

curl_source = [
  "$CURL_SOURCE_ROOT/lib/altsvc.c",
  "$CURL_SOURCE_ROOT/lib/amigaos.c",
  "$CURL_SOURCE_ROOT/lib/asyn-ares.c",
  "$CURL_SOURCE_ROOT/lib/asyn-thread.c",
  "$CURL_SOURCE_ROOT/lib/base64.c",
  "$CURL_SOURCE_ROOT/lib/bufref.c",
  "$CURL_SOURCE_ROOT/lib/c-hyper.c",
  "$CURL_SOURCE_ROOT/lib/conncache.c",
  "$CURL_SOURCE_ROOT/lib/connect.c",
  "$CURL_SOURCE_ROOT/lib/content_encoding.c",
  "$CURL_SOURCE_ROOT/lib/cookie.c",
  "$CURL_SOURCE_ROOT/lib/curl_addrinfo.c",
  "$CURL_SOURCE_ROOT/lib/curl_ctype.c",
  "$CURL_SOURCE_ROOT/lib/curl_des.c",
  "$CURL_SOURCE_ROOT/lib/curl_endian.c",
  "$CURL_SOURCE_ROOT/lib/curl_fnmatch.c",
  "$CURL_SOURCE_ROOT/lib/curl_get_line.c",
  "$CURL_SOURCE_ROOT/lib/curl_gethostname.c",
  "$CURL_SOURCE_ROOT/lib/curl_gssapi.c",
  "$CURL_SOURCE_ROOT/lib/curl_memrchr.c",
  "$CURL_SOURCE_ROOT/lib/curl_multibyte.c",
  "$CURL_SOURCE_ROOT/lib/curl_ntlm_core.c",
  "$CURL_SOURCE_ROOT/lib/curl_ntlm_wb.c",
  "$CURL_SOURCE_ROOT/lib/curl_path.c",
  "$CURL_SOURCE_ROOT/lib/curl_range.c",
  "$CURL_SOURCE_ROOT/lib/curl_rtmp.c",
  "$CURL_SOURCE_ROOT/lib/curl_sasl.c",
  "$CURL_SOURCE_ROOT/lib/curl_sspi.c",
  "$CURL_SOURCE_ROOT/lib/curl_threads.c",
  "$CURL_SOURCE_ROOT/lib/dict.c",
  "$CURL_SOURCE_ROOT/lib/doh.c",
  "$CURL_SOURCE_ROOT/lib/dotdot.c",
  "$CURL_SOURCE_ROOT/lib/dynbuf.c",
  "$CURL_SOURCE_ROOT/lib/easy.c",
  "$CURL_SOURCE_ROOT/lib/easygetopt.c",
  "$CURL_SOURCE_ROOT/lib/easyoptions.c",
  "$CURL_SOURCE_ROOT/lib/escape.c",
  "$CURL_SOURCE_ROOT/lib/file.c",
  "$CURL_SOURCE_ROOT/lib/fileinfo.c",
  "$CURL_SOURCE_ROOT/lib/fopen.c",
  "$CURL_SOURCE_ROOT/lib/formdata.c",
  "$CURL_SOURCE_ROOT/lib/ftp.c",
  "$CURL_SOURCE_ROOT/lib/ftplistparser.c",
  "$CURL_SOURCE_ROOT/lib/getenv.c",
  "$CURL_SOURCE_ROOT/lib/getinfo.c",
  "$CURL_SOURCE_ROOT/lib/gopher.c",
  "$CURL_SOURCE_ROOT/lib/hash.c",
  "$CURL_SOURCE_ROOT/lib/hmac.c",
  "$CURL_SOURCE_ROOT/lib/hostasyn.c",
  "$CURL_SOURCE_ROOT/lib/hostcheck.c",
  "$CURL_SOURCE_ROOT/lib/hostip.c",
  "$CURL_SOURCE_ROOT/lib/hostip4.c",
  "$CURL_SOURCE_ROOT/lib/hostip6.c",
  "$CURL_SOURCE_ROOT/lib/hostsyn.c",
  "$CURL_SOURCE_ROOT/lib/hsts.c",
  "$CURL_SOURCE_ROOT/lib/http.c",
  "$CURL_SOURCE_ROOT/lib/http_aws_sigv4.c",
  "$CURL_SOURCE_ROOT/lib/http2.c",
  "$CURL_SOURCE_ROOT/lib/http_chunks.c",
  "$CURL_SOURCE_ROOT/lib/http_digest.c",
  "$CURL_SOURCE_ROOT/lib/http_negotiate.c",
  "$CURL_SOURCE_ROOT/lib/http_ntlm.c",
  "$CURL_SOURCE_ROOT/lib/http_proxy.c",
  "$CURL_SOURCE_ROOT/lib/idn_win32.c",
  "$CURL_SOURCE_ROOT/lib/if2ip.c",
  "$CURL_SOURCE_ROOT/lib/imap.c",
  "$CURL_SOURCE_ROOT/lib/inet_ntop.c",
  "$CURL_SOURCE_ROOT/lib/inet_pton.c",
  "$CURL_SOURCE_ROOT/lib/krb5.c",
  "$CURL_SOURCE_ROOT/lib/ldap.c",
  "$CURL_SOURCE_ROOT/lib/llist.c",
  "$CURL_SOURCE_ROOT/lib/md4.c",
  "$CURL_SOURCE_ROOT/lib/md5.c",
  "$CURL_SOURCE_ROOT/lib/memdebug.c",
  "$CURL_SOURCE_ROOT/lib/mime.c",
  "$CURL_SOURCE_ROOT/lib/mprintf.c",
  "$CURL_SOURCE_ROOT/lib/mqtt.c",
  "$CURL_SOURCE_ROOT/lib/multi.c",
  "$CURL_SOURCE_ROOT/lib/netrc.c",
  "$CURL_SOURCE_ROOT/lib/non-ascii.c",
  "$CURL_SOURCE_ROOT/lib/nonblock.c",
  "$CURL_SOURCE_ROOT/lib/openldap.c",
  "$CURL_SOURCE_ROOT/lib/parsedate.c",
  "$CURL_SOURCE_ROOT/lib/pingpong.c",
  "$CURL_SOURCE_ROOT/lib/pop3.c",
  "$CURL_SOURCE_ROOT/lib/progress.c",
  "$CURL_SOURCE_ROOT/lib/psl.c",
  "$CURL_SOURCE_ROOT/lib/rand.c",
  "$CURL_SOURCE_ROOT/lib/rename.c",
  "$CURL_SOURCE_ROOT/lib/rtsp.c",
  "$CURL_SOURCE_ROOT/lib/select.c",
  "$CURL_SOURCE_ROOT/lib/sendf.c",
  "$CURL_SOURCE_ROOT/lib/setopt.c",
  "$CURL_SOURCE_ROOT/lib/sha256.c",
  "$CURL_SOURCE_ROOT/lib/share.c",
  "$CURL_SOURCE_ROOT/lib/slist.c",
  "$CURL_SOURCE_ROOT/lib/smb.c",
  "$CURL_SOURCE_ROOT/lib/smtp.c",
  "$CURL_SOURCE_ROOT/lib/socketpair.c",
  "$CURL_SOURCE_ROOT/lib/socks.c",
  "$CURL_SOURCE_ROOT/lib/socks_gssapi.c",
  "$CURL_SOURCE_ROOT/lib/socks_sspi.c",
  "$CURL_SOURCE_ROOT/lib/speedcheck.c",
  "$CURL_SOURCE_ROOT/lib/splay.c",
  "$CURL_SOURCE_ROOT/lib/strcase.c",
  "$CURL_SOURCE_ROOT/lib/strdup.c",
  "$CURL_SOURCE_ROOT/lib/strerror.c",
  "$CURL_SOURCE_ROOT/lib/strtok.c",
  "$CURL_SOURCE_ROOT/lib/strtoofft.c",
  "$CURL_SOURCE_ROOT/lib/system_win32.c",
  "$CURL_SOURCE_ROOT/lib/telnet.c",
  "$CURL_SOURCE_ROOT/lib/tftp.c",
  "$CURL_SOURCE_ROOT/lib/timeval.c",
  "$CURL_SOURCE_ROOT/lib/transfer.c",
  "$CURL_SOURCE_ROOT/lib/url.c",
  "$CURL_SOURCE_ROOT/lib/urlapi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/cleartext.c",
  "$CURL_SOURCE_ROOT/lib/vauth/cram.c",
  "$CURL_SOURCE_ROOT/lib/vauth/digest.c",
  "$CURL_SOURCE_ROOT/lib/vauth/digest_sspi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/gsasl.c",
  "$CURL_SOURCE_ROOT/lib/vauth/krb5_gssapi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/krb5_sspi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/ntlm.c",
  "$CURL_SOURCE_ROOT/lib/vauth/ntlm_sspi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/oauth2.c",
  "$CURL_SOURCE_ROOT/lib/vauth/spnego_gssapi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/spnego_sspi.c",
  "$CURL_SOURCE_ROOT/lib/vauth/vauth.c",
  "$CURL_SOURCE_ROOT/lib/version.c",
  "$CURL_SOURCE_ROOT/lib/version_win32.c",
  "$CURL_SOURCE_ROOT/lib/vquic/ngtcp2.c",
  "$CURL_SOURCE_ROOT/lib/vquic/quiche.c",
  "$CURL_SOURCE_ROOT/lib/vquic/vquic.c",
  "$CURL_SOURCE_ROOT/lib/vssh/libssh.c",
  "$CURL_SOURCE_ROOT/lib/vssh/libssh2.c",
  "$CURL_SOURCE_ROOT/lib/vssh/wolfssh.c",
  "$CURL_SOURCE_ROOT/lib/vtls/bearssl.c",
  "$CURL_SOURCE_ROOT/lib/vtls/gskit.c",
  "$CURL_SOURCE_ROOT/lib/vtls/gtls.c",
  "$CURL_SOURCE_ROOT/lib/vtls/keylog.c",
  "$CURL_SOURCE_ROOT/lib/vtls/mbedtls.c",
  "$CURL_SOURCE_ROOT/lib/vtls/mbedtls_threadlock.c",
  "$CURL_SOURCE_ROOT/lib/vtls/mesalink.c",
  "$CURL_SOURCE_ROOT/lib/vtls/nss.c",
  "$CURL_SOURCE_ROOT/lib/vtls/openssl.c",
  "$CURL_SOURCE_ROOT/lib/vtls/rustls.c",
  "$CURL_SOURCE_ROOT/lib/vtls/schannel.c",
  "$CURL_SOURCE_ROOT/lib/vtls/schannel_verify.c",
  "$CURL_SOURCE_ROOT/lib/vtls/sectransp.c",
  "$CURL_SOURCE_ROOT/lib/vtls/vtls.c",
  "$CURL_SOURCE_ROOT/lib/vtls/wolfssl.c",
  "$CURL_SOURCE_ROOT/lib/warnless.c",
  "$CURL_SOURCE_ROOT/lib/wildcard.c",
  "$CURL_SOURCE_ROOT/lib/x509asn1.c",
]

if (defined(ohos_lite)) {
  import("//build/lite/config/component/lite_component.gni")

  config("curl_config") {
    include_dirs = [ "$CURL_SOURCE_ROOT/lib" ]
    if (ohos_kernel_type == "liteos_m") {
      include_dirs += [ "//kernel/liteos_m/kal/posix/include" ]
    }
    cflags = [
      "-DBUILDING_LIBCURL",
      "-DHAVE_CONFIG_H",
      "-D_GNU_SOURCE",
      "-DOS=\"liteOS\"",
      "-fPIC",
      "-Wdeclaration-after-statement",
      "-Wendif-labels",
      "-Wfloat-equal",
      "-Winline",
      "-Wmissing-declarations",
      "-Wmissing-prototypes",
      "-Wnested-externs",
      "-Wno-format-nonliteral",
      "-Wno-implicit-function-declaration",
      "-Wno-int-conversion",
      "-Wno-long-long",
      "-Wno-multichar",
      "-Wno-nested-externs",
      "-Wno-sign-compare",
      "-Wno-system-headers",
      "-Wno-varargs",
      "-Wno-overflow",
      "-Wpointer-arith",
      "-Wstrict-prototypes",
      "-Wunused",
      "-Wwrite-strings",
      "-Wno-unused-variable",
      "-Wno-parentheses",
      "-Wno-strict-prototypes",
      "-Os",
      "-ffunction-sections",
      "-fdata-sections",
      "-fno-unwind-tables",
      "-fno-asynchronous-unwind-tables",
      "-Wno-deprecated-declarations",
      "-Wimplicit-fallthrough",
    ]
    if (ohos_kernel_type == "liteos_m") {
      cflags += [ "-DOHOS_CURL_CONFIG_H=\"curl_config_liteos_m.h\"" ]
    } else {
      cflags += [ "-DOHOS_CURL_CONFIG_H=\"curl_config_liteos_a.h\"" ]
    }
  }

  config("curl_config_public") {
    include_dirs = [
      "$CURL_SOURCE_ROOT/include",
      "//third_party/curl/customized/include",
    ]
  }

  if (ohos_kernel_type == "liteos_m") {
    static_library("libcurl_static") {
      sources = curl_source
      deps = [ "//third_party/mbedtls" ]
      deps += [ "//third_party/nghttp2/lib:nghttp2_lib_static" ]
      configs += [
        ":curl_config",
        ":curl_config_public",
      ]

      public_configs = [ ":curl_config_public" ]
    }
  } else {
    shared_library("libcurl_shared") {
      sources = curl_source
      deps = [ "//third_party/mbedtls" ]
      deps += [ "//third_party/nghttp2/lib:nghttp2_lib_shared" ]
      configs += [
        ":curl_config",
        ":curl_config_public",
      ]
      public_configs = [ ":curl_config_public" ]
    }
  }
} else {
  import("//build/ohos.gni")

  config("curl_config") {
    include_dirs = [
      "$CURL_SOURCE_ROOT/include",
      "$CURL_SOURCE_ROOT/lib",
      "//third_party/curl/customized/include",
      "//third_party/nghttp2/lib/includes",
    ]

    cflags = [ "-Wno-deprecated-declarations" ]
  }

  ohos_source_set("curl") {
    configs = [ ":curl_config" ]
    configs += [ "//third_party/openssl:ssl_config_public" ]

    sources = curl_source

    if ("${current_os}_${current_cpu}" == "mingw_x86_64") {
      curl_https_ca_file_path = "\"../../resources/cacert.pem\""

      cflags = [
        "-g",
        "-O2",
        "-Wall",
        "-w",
        "-fno-strict-aliasing",
        "-m64",
        "-D_AMD64_",
        "-DBUILDING_LIBCURL",
        "-c",
        "-DUSE_OPENSSL",
        "-DHAVE_OPENSSL_ENGINE_H",
        "-DHAVE_OPENSSL_PKCS12_H",
        "-DHAVE_ENGINE_LOAD_BUILTIN_ENGINES",
        "-DOPENSSL_NO_KRB5",
        "-DCURL_CA_BUNDLE=${curl_https_ca_file_path}",
        "-Wno-deprecated-declarations",
        "-Wimplicit-fallthrough",
      ]

      libs = [
        "//prebuilts/mingw-w64/ohos/linux-x86_64/clang-mingw/x86_64-w64-mingw32/lib/libwsock32.a",
        "//prebuilts/mingw-w64/ohos/linux-x86_64/clang-mingw/x86_64-w64-mingw32/lib/libmincore.a",
      ]
    } else if (host_os == "mac" && current_os == "mac") {
      cflags = [
        "-DHAVE_CONFIG_H",
        "-Qunused-arguments",
        "-Os",
        "-mmacosx-version-min=10.8",
        "-Werror=partial-availability",
        "-fvisibility=hidden",
        "-DBUILDING_LIBCURL",
        "-DCURL_HIDDEN_SYMBOLS",
        "-c",
        "-Wno-deprecated-declarations",
        "-Wimplicit-fallthrough",
      ]

      cflags_c = [
        "-Wno-unused-function",
        "-Wno-unused-variable",
      ]

      frameworks = [
        # AppKit symbols NSFontWeightXXX may be dlsym'ed.
        "AppKit.framework",
        "ApplicationServices.framework",
        "OpenGL.framework",
        "CoreFoundation.framework",
        "SystemConfiguration.framework",
      ]
    } else if ("${current_cpu}" == "arm64" || "${current_cpu}" == "arm" ||
               "${current_cpu}" == "x86_64") {
      cflags = [
        "-fPIC",
        "-g",
        "-O2",
        "-Wall",
        "-w",
        "-fno-strict-aliasing",
        "-fvisibility=hidden",
        "-DBUILDING_LIBCURL",
        "-DCURL_HIDDEN_SYMBOLS",
        "-c",
        "-DHAVE_CONFIG_H",
        "-Wno-deprecated-declarations",
        "-Wimplicit-fallthrough",
      ]
    } else if (current_cpu == "x64" && current_os == "ios") {
      cflags = [
        "-fPIC",
        "-g",
        "-O2",
        "-Wall",
        "-w",
        "-fno-strict-aliasing",
        "-fvisibility=hidden",
        "-DBUILDING_LIBCURL",
        "-DCURL_HIDDEN_SYMBOLS",
        "-c",
        "-DHAVE_CONFIG_H",
        "-Wno-deprecated-declarations",
        "-Wimplicit-fallthrough",
      ]
    } else if (current_cpu == "x64" && current_os == "linux") {
      cflags = [
        "-fPIC",
        "-g",
        "-O2",
        "-Wall",
        "-w",
        "-fno-strict-aliasing",
        "-fvisibility=hidden",
        "-DBUILDING_LIBCURL",
        "-DCURL_HIDDEN_SYMBOLS",
        "-c",
        "-DHAVE_CONFIG_H",
        "-Wno-deprecated-declarations",
        "-Wimplicit-fallthrough",
      ]
    }
    cflags += [ "-DOHOS_CURL_CONFIG_H=\"curl_config_standard.h\"" ]

    if (current_os == "ios") {
      deps = [
        "//third_party/nghttp2/lib:nghttp2",
        "//third_party/openssl:libcrypto_static",
        "//third_party/openssl:ssl_source",
        "//third_party/zlib:libz",
      ]
    } else {
      deps = [
        "//third_party/nghttp2/lib:libnghttp2_shared",
        "//third_party/openssl:libcrypto_shared",
        "//third_party/openssl:libssl_shared",
        "//third_party/zlib:shared_libz",
      ]
    }

    subsystem_name = "thirdparty"
    part_name = "curl"
  }

  ohos_shared_library("curl_shared") {
    deps = [ ":curl" ]

    configs = [ ":curl_config" ]

    public_configs = [ ":curl_config_public" ]

    install_images = [ "system" ]

    subsystem_name = "thirdparty"
    innerapi_tags = [ "platformsdk" ]
    part_name = "curl"
  }
}

group("curl_target") {
  if (defined(ohos_lite)) {
    if (ohos_kernel_type == "liteos_m") {
      deps = [ ":libcurl_static" ]
    } else {
      deps = [ ":libcurl_shared" ]
    }
  } else {
    deps = [
      ":curl",
      ":curl_shared",
    ]
  }
}
